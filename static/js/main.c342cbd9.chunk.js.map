{"version":3,"sources":["Table.js","Form.js","App.js","index.js"],"names":["TableHeader","TableBody","props","rows","characterData","map","row","index","name","job","onClick","removeCharacter","Table","Form","initialState","state","handleChange","event","target","value","setState","submitform","handleSubmit","this","htmlFor","type","id","onChange","Component","App","characters","filter","character","i","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wPAIMA,G,MAAc,WAClB,OACE,gCACE,+BACE,sCACA,qCACA,8BAMFC,EAAY,SAACC,GAEjB,IAAMC,EAAOD,EAAME,cAAcC,KAAI,SAACC,EAAKC,GACzC,OACE,+BAEE,6BAAKD,EAAIE,OACT,6BAAKF,EAAIG,MACT,6BACE,wBAAQC,QAAS,kBAAMR,EAAMS,gBAAgBJ,IAA7C,wBALKA,MAUb,OAAO,gCAAQJ,KAoBFS,EAjBD,SAACV,GAAU,IAGfE,EAAmCF,EAAnCE,cAAeO,EAAoBT,EAApBS,gBAEvB,OACE,kCACE,cAAC,EAAD,IAEA,cAAC,EAAD,CACEP,cAAeA,EACfO,gBAAiBA,Q,OCUVE,G,kNAjDbC,aAAe,CACbN,KAAM,GACNC,IAAK,I,EAEPM,MAAQ,EAAKD,a,EAGbE,aAAe,SAACC,GAAU,MAEAA,EAAMC,OAAtBV,EAFgB,EAEhBA,KAAMW,EAFU,EAEVA,MACd,EAAKC,SAAL,eACGZ,EAAOW,K,EAIZE,WAAa,WAEX,EAAKnB,MAAMoB,aAAa,EAAKP,OAE7B,EAAKK,SAAS,EAAKN,e,uDAGX,IAAD,EACeS,KAAKR,MAAnBP,EADD,EACCA,KAAMC,EADP,EACOA,IAEd,OACE,iCACE,uBAAOe,QAAQ,OAAf,kBACA,uBACEC,KAAK,OACLjB,KAAK,OACLkB,GAAG,OACHP,MAAOX,EACPmB,SAAUJ,KAAKP,eAEjB,uBAAOQ,QAAQ,MAAf,iBACA,uBACEC,KAAK,OACLjB,KAAK,MACLkB,GAAG,MACHP,MAAOV,EACPkB,SAAUJ,KAAKP,eAEjB,uBAAOS,KAAK,SAASN,MAAM,SAAST,QAASa,KAAKF,oB,GA7CvCO,cC2CJC,E,4MArCbd,MAAQ,CACNe,WAAY,I,EAIdnB,gBAAkB,SAACJ,GAAW,IACpBuB,EAAe,EAAKf,MAApBe,WAER,EAAKV,SAAS,CACZU,WAAYA,EAAWC,QAAO,SAACC,EAAWC,GACxC,OAAOA,IAAM1B,Q,EAKnBe,aAAe,SAACU,GAEd,EAAKZ,SAAS,CAAEU,WAAW,GAAD,mBAAM,EAAKf,MAAMe,YAAjB,CAA6BE,O,uDAGhD,IAECF,EAAeP,KAAKR,MAApBe,WAER,OACE,sBAAKI,UAAU,YAAf,UAEE,cAAC,EAAD,CACE9B,cAAe0B,EACfnB,gBAAiBY,KAAKZ,kBAExB,cAAC,EAAD,CAAMW,aAAcC,KAAKD,sB,GAhCfM,aCHlBO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.c342cbd9.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./index.css\";\nimport \"./Table.css\";\n\nconst TableHeader = () => {\n  return (\n    <thead>\n      <tr>\n        <th>Name</th>\n        <th>Job</th>\n        <th>{}</th>\n      </tr>\n    </thead>\n  );\n};\n\nconst TableBody = (props) => {\n  // once the data is accessed by the TableBody component it can be mapped over and used to create dynamic table rows\n  const rows = props.characterData.map((row, index) => {\n    return (\n      <tr key={index}>\n        {/* keys are used as uniquqe identifiers to list items in React component */}\n        <td>{row.name}</td>\n        <td>{row.job}</td>\n        <td>\n          <button onClick={() => props.removeCharacter(index)}>Delete</button>\n        </td>\n      </tr>\n    );\n  });\n  return <tbody>{rows}</tbody>;\n};\n\nconst Table = (props) => {\n  // characterData & removeCharacter() is a property of the Table component\n\n  const { characterData, removeCharacter } = props;\n\n  return (\n    <table>\n      <TableHeader />\n      {/* property has to passed from App -> Table -> TableBody*/}\n      <TableBody\n        characterData={characterData}\n        removeCharacter={removeCharacter}\n      />\n    </table>\n  );\n};\n\nexport default Table;\n","import React, { Component } from \"react\";\nimport \"./Form.css\";\n\nclass Form extends Component {\n  // it is no longer necessary to inlucde a constructor on React class components\n  initialState = {\n    name: \"\",\n    job: \"\",\n  };\n  state = this.initialState;\n\n  // this is our event handler for the form name input\n  handleChange = (event) => {\n    // this is object destructuring syntax\n    const { name, value } = event.target;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  submitform = () => {\n    // calls the handleSubmit function\n    this.props.handleSubmit(this.state);\n    // calls the setState build-in method that changes the state of the component\n    this.setState(this.initialState);\n  };\n\n  render() {\n    const { name, job } = this.state;\n    // onChange -- when the input changes it calls this.handleChange which updates the state\n    return (\n      <form>\n        <label htmlFor=\"name\">Name</label>\n        <input\n          type=\"text\"\n          name=\"name\"\n          id=\"name\"\n          value={name}\n          onChange={this.handleChange}\n        ></input>\n        <label htmlFor=\"job\">Job</label>\n        <input\n          type=\"text\"\n          name=\"job\"\n          id=\"job\"\n          value={job}\n          onChange={this.handleChange}\n        ></input>\n        <input type=\"button\" value=\"Submit\" onClick={this.submitform} />\n      </form>\n    );\n  }\n}\n\nexport default Form;\n","import React, { Component } from \"react\";\nimport Table from \"./Table\";\nimport Form from \"./Form\";\nimport \"./index.css\";\n\n// props gives us a one way data flow, parent -> child\n// state allows us to update private data from a component\n\nclass App extends Component {\n  state = {\n    characters: [],\n  };\n\n  // this function removes a character from the state.characters array\n  removeCharacter = (index) => {\n    const { characters } = this.state;\n    //this.setState is how you modify/update an array using a built in method for modifying state\n    this.setState({\n      characters: characters.filter((character, i) => {\n        return i !== index;\n      }),\n    });\n  };\n\n  handleSubmit = (character) => {\n    // using the spread operator to add a new character to the existing characters array\n    this.setState({ characters: [...this.state.characters, character] });\n  };\n\n  render() {\n    // create character data to pass through to Table component as a property/prop\n    const { characters } = this.state;\n\n    return (\n      <div className=\"container\">\n        {/* Using the characters data & removeCharacter function to pass through to Table as a property*/}\n        <Table\n          characterData={characters}\n          removeCharacter={this.removeCharacter}\n        />\n        <Form handleSubmit={this.handleSubmit} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// ADD FULL UPDATE FUNCTIONALITY TO THE FORM, ABLE TO EDIT NAME AND EDIT JOB INFO\n// PUSH TO GITHUB USING A BUNDLER\n"],"sourceRoot":""}